#!/bin/bash

### check for conflicting config files/folders that would prevent installation to continue
if [ -e conf ] && [ ! -d conf ]; then
  echo "ERROR: There seems to be file instead of folder named conf in broadexec directory. Unable to continue with installation unless it is removed."
  brdexec_interruption_ctrl_c
fi

if [ ! -d conf ]; then
  mkdir conf 2>/dev/null 1&>2
  if [ "$?" -ne 0 ]; then
    echo "ERROR: Unable to create conf folder."
    brdexec_interruption_ctrl_c
  fi
fi

echo "##########################################################################"
echo "######################### Broadexec installation #########################"
echo "##########################################################################"

echo "--------------------------------------------------------------------------"
echo "This is your first run of broadexec, welcome and hope you will enjoy it ! "
echo "Please consider reading man and docs and configure your broadexec properly"
echo "--------------------------------------------------------------------------"

echo -e "\nIf you wish to skip or cancel installation, write to any of "
echo "the prompts \"skip\" or \"cancel\""
echo "In case you don\'t want installation to start automatically, write \"abort\""
echo "To invoke installation again just delete \"#already installed\""
echo "line from conf/broadexec.conf and run broadexec"
echo "If installation is cancelled, it will restart on next run with possibility"
echo "to skip already configured items"

### Username selection
echo
echo "##########################################################################"
echo "### Default username selection ###########################################"
echo

### check if user already added in conf or not
if [ !  -z "${BRDEXEC_USER}" ]; then
  echo -e "Default username already in config: ${BRDEXEC_USER}. Do you wish to edit it anyways [skip] (yes/skip):"
  read BRDEXEC_USER_FOUND
  if [ "${BRDEXEC_USER_FOUND}" = "" 2>/dev/null ]; then
    BRDEXEC_USER_FOUND=skip
  fi
fi

case "${BRDEXEC_USER_FOUND}" in
  skip)
    BRDEXEC_INSTALL_USER=skip ;;
  *)
    logname >/dev/null 2>&1
    if [ "${?}" -eq 0 ]; then
      BRDEXEC_INSTALL_DEFAULT_USER="$(logname 2>/dev/null)"
    elif [ ! -z "${USER}" ]; then
      BRDEXEC_INSTALL_DEFAULT_USER="${USER}"
    else
      BRDEXEC_INSTALL_DEFAULT_USER=root
    fi
    echo "Enter default username used for connecting to hosts [${BRDEXEC_INSTALL_DEFAULT_USER}]:"
    read BRDEXEC_INSTALL_USER ;;
esac

if [ "${BRDEXEC_INSTALL_USER}" = "" 2>/dev/null ]; then
  BRDEXEC_INSTALL_USER="${BRDEXEC_INSTALL_DEFAULT_USER}"
fi

case "${BRDEXEC_INSTALL_USER}" in
  skip)
    BRDEXEC_INSTALL_USER=${BRDEXEC_USER}
    echo "WARNING: Skipping User selection" ;;
  cancel)
    echo "WARNING: Cancelling installation"
    brdexec_interruption_ctrl_c ;;
  abort)
    echo "#already installed" >> conf/broadexec.conf
    echo "\n   \"#already installed\" written into conf/broadexec.conf"
    brdexec_interruption_ctrl_c ;;
  *)
    echo "OK: Default user selected"
    echo "BRDEXEC_USER=${BRDEXEC_INSTALL_USER}" >> conf/broadexec.conf
    echo "   BRDEXEC_USER=${BRDEXEC_INSTALL_USER} written into conf/broadexec.conf"
esac

echo "### TIP: You can always override this with \"-u\" parameter"

### SSH key selection
echo
echo "##########################################################################"
echo "### SSH key selection ####################################################"
echo
echo "Broadexec is supposed to run scripts on many hosts so SSH keys are a must"
echo "NOTE: Your private SSH keys are not copied anywhere, broadexec just needs"
echo "to know which one to use"

if [ -f ~/.ssh/id_rsa ]; then
  BRDEXEX_INSTALL_PROPOSED_KEY="~/.ssh/id_rsa"
elif [ -f ~/.ssh/id_dsa ]; then
  BRDEXEX_INSTALL_PROPOSED_KEY="~/.ssh/id_dsa"
fi

if [ ! -z "${BRDEXEC_USER_SSH_KEY}" ]; then
  echo "SSH key already in config: ${BRDEXEC_USER_SSH_KEY}. Do you wish to edit it anyways [skip] (yes/skip):"
  read BRDEXEC_USER_SSH_KEY_FOUND
  if [ "${BRDEXEC_USER_SSH_KEY_FOUND}" = "" 2>/dev/null ]; then
    BRDEXEC_USER_SSH_KEY_FOUND=skip
  fi
fi

case "${BRDEXEC_USER_SSH_KEY_FOUND}" in
  skip)
    BRDEXEC_INSTALL_USER_SSH_KEY=skip ;;
  *)
    echo -e "Enter location of your private SSH key\c"
    if [ ! -z "${BRDEXEX_INSTALL_PROPOSED_KEY}" ]; then
      echo -e " [${BRDEXEX_INSTALL_PROPOSED_KEY}]\c"
    else
echo -e " [skip]\c"
    fi
    echo ": "
    read BRDEXEC_INSTALL_USER_SSH_KEY ;;
esac

if [ "${BRDEXEC_INSTALL_USER_SSH_KEY}" = "" 2>/dev/null ]; then
  if [ -z "${BRDEXEX_INSTALL_PROPOSED_KEY}" ]; then
    BRDEXEC_INSTALL_USER_SSH_KEY="skip"
  else
    BRDEXEC_INSTALL_USER_SSH_KEY="${BRDEXEX_INSTALL_PROPOSED_KEY}"
  fi
fi

case "${BRDEXEC_INSTALL_USER_SSH_KEY}" in
  skip)
    echo "WARNING: Skipping SSH key selection" ;;
  cancel)
    echo "WARNING: Cancelling installation"
    exit 0 ;;
  abort)
    echo "#already installed" >> conf/broadexec.conf
    echo "\"   #already installed\" written into conf/broadexec.conf"
    exit 0 ;;
  *)
    echo "OK: SSH Key selected"
    echo "BRDEXEC_USER_SSH_KEY=${BRDEXEC_INSTALL_USER_SSH_KEY}" >> conf/broadexec.conf
    echo "BRDEXEC_USER_SSH_KEY=${BRDEXEC_INSTALL_USER_SSH_KEY} written into conf/broadexec.conf"
esac

#teamconfigs
echo
echo "##########################################################################"
echo "### Teamconfig selection ####################################################"
echo
echo "Broadexec supports teamwork. If you are using the same hostlists and scripts"
echo "as your colleagues, you can share them eg. in git repository and distribute"
echo "them to each other. Learn more on github wiki."
echo

if [ ! -z "${BRDEXEC_TEAM_CONFIG}" ]; then
  echo -e "Teamconfig already selected: ${BRDEXEC_TEAM_CONFIG}. Do you wish to edit it anyways? [skip] (yes/skip): \c"
  read BRDEXEC_TEAM_CONFIG_FOUND
  if [ "${BRDEXEC_TEAM_CONFIG_FOUND}" = "" 2>/dev/null ]; then
    BRDEXEC_TEAM_CONFIG_FOUND=skip
  fi
fi

case "${BRDEXEC_TEAM_CONFIG_FOUND}" in
  skip)
    echo "WARNING: Skipping team config selection" ;;
  cancel)
    echo "WARNING: Cancelling installation"
    exit 0 ;;
  abort)
    echo "#already installed" >> conf/broadexec.conf
    echo "\"   #already installed\" written into conf/broadexec.conf"
    exit 0 ;;
  *)
    if [ "$(ls -d ./teamconfigs/*/ 2>/dev/null | wc -w)" -gt 0 ]; then
      select BRDEXEC_TEAM_CONFIG_ITEM in $(ls -d ./teamconfigs/*/ | awk -F "/" '{print $3}'); do
        if [ "$(ls -d ./teamconfigs/*/ 2>/dev/null | wc -w)" -lt "${REPLY}" 2>/dev/null ] || ! [ "${REPLY}" -eq "${REPLY}" 2>/dev/null ]; then
          echo "Wrong input!"
          BRDEXEC_TEAM_CONFIG_SELECTED=skip
        fi
        break
      done
      if [ "${BRDEXEC_TEAM_CONFIG_SELECTED}" != skip ]; then
        echo "OK: Team config selected"
        BRDEXEC_TEAM_CONFIG=${BRDEXEC_TEAM_CONFIG_ITEM}
        echo "BRDEXEC_TEAM_CONFIG=${BRDEXEC_TEAM_CONFIG_ITEM}" >> conf/broadexec.conf
        echo "BRDEXEC_TEAM_CONFIG=${BRDEXEC_TEAM_CONFIG_ITEM} written into conf/broadexec.conf"
      fi
    fi;;
esac

### check and fix team config links
if [ ! -z "${BRDEXEC_TEAM_CONFIG}" ]; then
  ### check if default link is correct
  if [ "$(ls -la ./default 2>/dev/null | awk -F " -> " '{print $2}')" != "./teamconfigs/${BRDEXEC_TEAM_CONFIG}" ]; then
    brdexec_display_output "Fixing default link to teamconfigs/${BRDEXEC_TEAM_CONFIG}" 1
    if [ -h ./default ]; then
      unlink ./default
    fi
    ln -s ./teamconfigs/${BRDEXEC_TEAM_CONFIG} ./default
  fi
  for BRDEXEC_TEAM_CONFIG_SUBFOLDER in conf hosts scripts
  do
    if [ ! -d "../teamconfigs/${BRDEXEC_TEAM_CONFIG}/${BRDEXEC_TEAM_CONFIG_SUBFOLDER}" ]; then
      mkdir -p ../teamconfigs/${BRDEXEC_TEAM_CONFIG}/${BRDEXEC_TEAM_CONFIG_SUBFOLDER} 2>/dev/null
      if [ "${?}" -ne 0 ]; then
        echo "Unable to create ../teamconfigs/${BRDEXEC_TEAM_CONFIG}/${BRDEXEC_TEAM_CONFIG_SUBFOLDER}"
      fi
    fi
    if [ -d "${BRDEXEC_TEAM_CONFIG_SUBFOLDER}" ]; then
      if [ ! -h "${BRDEXEC_TEAM_CONFIG_SUBFOLDER}/${BRDEXEC_TEAM_CONFIG}" ]; then
        echo "Creating link ${BRDEXEC_TEAM_CONFIG_SUBFOLDER}/${BRDEXEC_TEAM_CONFIG} to teamconfigs/${BRDEXEC_TEAM_CONFIG}/${BRDEXEC_TEAM_CONFIG_SUBFOLDER}"
        ln -s ../teamconfigs/${BRDEXEC_TEAM_CONFIG}/${BRDEXEC_TEAM_CONFIG_SUBFOLDER} ${BRDEXEC_TEAM_CONFIG_SUBFOLDER}/${BRDEXEC_TEAM_CONFIG}
      fi
    fi
  done
fi

echo
echo -e "\n### That is it! ###"
echo -e "\nThis is enough to get you started. To explore more configuration"
echo "options you can check out config templates in templates/conf folder."

echo "#already installed" >> conf/broadexec.conf
echo -e "\n   \"#already installed\" written into conf/broadexec.conf"
echo -e "\n\n### Broadexec installation is now finished! \n"

echo "Example:"
if [ "${BRDEXEC_INSTALL_USER}" != "" 2>/dev/null ]; then
  BRDEXEC_INSTALL_USER="${BRDEXEC_INSTALL_USER}@"
fi
echo "Make sure you have ssh_key added (ssh-copy-id ${BRDEXEC_INSTALL_USER}localhost)"
echo "Make sure you can execute \"sudo\" without password"
echo "\$ ./broadexec.sh -s scripts/uptime.sh -H localhost"

### we can get away without cleanup during installation, no tmp files written at this stage
exit 0

